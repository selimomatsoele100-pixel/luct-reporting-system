{"ast":null,"code":"// frontend/src/services/api.js\nimport axios from 'axios';\n\n// Base URL from environment or fallback\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconsole.log('🔗 API Base URL:', API_BASE_URL);\n\n// Axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 15000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  var _config$method;\n  const token = localStorage.getItem('token');\n  if (token) config.headers.Authorization = `Bearer ${token}`;\n  console.log(`🔄 API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`);\n  return config;\n}, error => {\n  console.error('❌ Request error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  console.log(`✅ API Success: ${response.status} ${response.config.url}`);\n  return response;\n}, error => {\n  var _error$config, _error$config2, _error$config2$method, _error$response, _error$response2, _error$response3, _error$response4, _error$response4$data, _error$response5, _error$response5$data, _error$response6;\n  const details = {\n    url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n    method: (_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : (_error$config2$method = _error$config2.method) === null || _error$config2$method === void 0 ? void 0 : _error$config2$method.toUpperCase(),\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    statusText: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.statusText,\n    message: error.message,\n    code: error.code\n  };\n  console.error('❌ API Error:', details);\n\n  // User-friendly messages\n  if (error.code === 'ECONNREFUSED') {\n    error.userMessage = 'Cannot connect to backend. Make sure the server is running.';\n  } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 500) {\n    error.userMessage = 'Server error occurred. Please try again later.';\n  } else if ((_error$response4 = error.response) !== null && _error$response4 !== void 0 && (_error$response4$data = _error$response4.data) !== null && _error$response4$data !== void 0 && _error$response4$data.error) {\n    error.userMessage = error.response.data.error;\n  } else if ((_error$response5 = error.response) !== null && _error$response5 !== void 0 && (_error$response5$data = _error$response5.data) !== null && _error$response5$data !== void 0 && _error$response5$data.message) {\n    error.userMessage = error.response.data.message;\n  } else {\n    error.userMessage = error.message || 'An unexpected error occurred.';\n  }\n\n  // Handle 401 Unauthorized\n  if (((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Retry wrapper\nconst createApiWithRetry = (apiCall, maxRetries = 2) => {\n  return async (...args) => {\n    let lastError;\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        return await apiCall(...args);\n      } catch (error) {\n        lastError = error;\n        console.log(`🔄 Retry ${attempt}/${maxRetries} for ${args[0]}`);\n        if (attempt === maxRetries) break;\n        await new Promise(resolve => setTimeout(resolve, 1000 * attempt));\n      }\n    }\n    throw lastError;\n  };\n};\n\n// ===== Auth API =====\nexport const authAPI = {\n  login: createApiWithRetry(data => api.post('/auth/login', data)),\n  register: createApiWithRetry(data => api.post('/auth/register', data)),\n  getInitData: createApiWithRetry(() => api.get('/auth/init-data'))\n};\n\n// ===== Reports API =====\nexport const reportsAPI = {\n  create: createApiWithRetry(data => api.post('/reports', data)),\n  getMyReports: createApiWithRetry(() => api.get('/reports/my-reports')),\n  getUnsignedReports: createApiWithRetry(() => api.get('/reports/unsigned')),\n  signReport: createApiWithRetry(id => api.put(`/reports/${id}/sign`)),\n  getAll: createApiWithRetry(() => api.get('/reports'))\n};\n\n// ===== Users API =====\nexport const usersAPI = {\n  getLecturers: createApiWithRetry(() => api.get('/users/lecturers')),\n  getStudents: createApiWithRetry(() => api.get('/users/students')),\n  getClasses: createApiWithRetry(() => api.get('/users/classes')),\n  getCourses: createApiWithRetry(() => api.get('/users/courses')),\n  assignClass: createApiWithRetry(data => api.post('/users/assign-class', data))\n};\n\n// ===== Complaints API =====\nexport const complaintsAPI = {\n  create: createApiWithRetry(data => api.post('/complaints', data)),\n  getMyComplaints: createApiWithRetry(() => api.get('/complaints/my-complaints')),\n  getComplaintsForMe: createApiWithRetry(() => api.get('/complaints/for-me')),\n  respond: createApiWithRetry((id, response) => api.put(`/complaints/${id}/respond`, {\n    response\n  })),\n  getAll: createApiWithRetry(() => api.get('/complaints'))\n};\n\n// ===== Connection / Health API =====\nexport const connectionAPI = {\n  health: () => api.get('/health'),\n  testAllEndpoints: async () => {\n    const results = {};\n    try {\n      results.health = await api.get('/health');\n      results.classes = await api.get('/users/classes').catch(e => ({\n        error: e.message\n      }));\n      results.courses = await api.get('/users/courses').catch(e => ({\n        error: e.message\n      }));\n      return results;\n    } catch (error) {\n      console.error('Comprehensive connection test failed:', error);\n      return {\n        error: error.message\n      };\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","console","log","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","token","localStorage","getItem","Authorization","method","toUpperCase","url","error","Promise","reject","response","status","_error$config","_error$config2","_error$config2$method","_error$response","_error$response2","_error$response3","_error$response4","_error$response4$data","_error$response5","_error$response5$data","_error$response6","details","statusText","message","code","userMessage","data","removeItem","window","location","href","createApiWithRetry","apiCall","maxRetries","args","lastError","attempt","resolve","setTimeout","authAPI","login","post","register","getInitData","get","reportsAPI","getMyReports","getUnsignedReports","signReport","id","put","getAll","usersAPI","getLecturers","getStudents","getClasses","getCourses","assignClass","complaintsAPI","getMyComplaints","getComplaintsForMe","respond","connectionAPI","health","testAllEndpoints","results","classes","catch","e","courses"],"sources":["C:/Users/user/luct-reporting-system/frontend/src/services/api.js"],"sourcesContent":["// frontend/src/services/api.js\r\nimport axios from 'axios';\r\n\r\n// Base URL from environment or fallback\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\nconsole.log('🔗 API Base URL:', API_BASE_URL);\r\n\r\n// Axios instance\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 15000,\r\n  headers: { 'Content-Type': 'application/json' },\r\n});\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    console.log(`🔄 API Request: ${config.method?.toUpperCase()} ${config.url}`);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('❌ Request error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(`✅ API Success: ${response.status} ${response.config.url}`);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    const details = {\r\n      url: error.config?.url,\r\n      method: error.config?.method?.toUpperCase(),\r\n      status: error.response?.status,\r\n      statusText: error.response?.statusText,\r\n      message: error.message,\r\n      code: error.code,\r\n    };\r\n    console.error('❌ API Error:', details);\r\n\r\n    // User-friendly messages\r\n    if (error.code === 'ECONNREFUSED') {\r\n      error.userMessage = 'Cannot connect to backend. Make sure the server is running.';\r\n    } else if (error.response?.status === 500) {\r\n      error.userMessage = 'Server error occurred. Please try again later.';\r\n    } else if (error.response?.data?.error) {\r\n      error.userMessage = error.response.data.error;\r\n    } else if (error.response?.data?.message) {\r\n      error.userMessage = error.response.data.message;\r\n    } else {\r\n      error.userMessage = error.message || 'An unexpected error occurred.';\r\n    }\r\n\r\n    // Handle 401 Unauthorized\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Retry wrapper\r\nconst createApiWithRetry = (apiCall, maxRetries = 2) => {\r\n  return async (...args) => {\r\n    let lastError;\r\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n      try {\r\n        return await apiCall(...args);\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log(`🔄 Retry ${attempt}/${maxRetries} for ${args[0]}`);\r\n        if (attempt === maxRetries) break;\r\n        await new Promise((resolve) => setTimeout(resolve, 1000 * attempt));\r\n      }\r\n    }\r\n    throw lastError;\r\n  };\r\n};\r\n\r\n// ===== Auth API =====\r\nexport const authAPI = {\r\n  login: createApiWithRetry((data) => api.post('/auth/login', data)),\r\n  register: createApiWithRetry((data) => api.post('/auth/register', data)),\r\n  getInitData: createApiWithRetry(() => api.get('/auth/init-data')),\r\n};\r\n\r\n// ===== Reports API =====\r\nexport const reportsAPI = {\r\n  create: createApiWithRetry((data) => api.post('/reports', data)),\r\n  getMyReports: createApiWithRetry(() => api.get('/reports/my-reports')),\r\n  getUnsignedReports: createApiWithRetry(() => api.get('/reports/unsigned')),\r\n  signReport: createApiWithRetry((id) => api.put(`/reports/${id}/sign`)),\r\n  getAll: createApiWithRetry(() => api.get('/reports')),\r\n};\r\n\r\n// ===== Users API =====\r\nexport const usersAPI = {\r\n  getLecturers: createApiWithRetry(() => api.get('/users/lecturers')),\r\n  getStudents: createApiWithRetry(() => api.get('/users/students')),\r\n  getClasses: createApiWithRetry(() => api.get('/users/classes')),\r\n  getCourses: createApiWithRetry(() => api.get('/users/courses')),\r\n  assignClass: createApiWithRetry((data) => api.post('/users/assign-class', data)),\r\n};\r\n\r\n// ===== Complaints API =====\r\nexport const complaintsAPI = {\r\n  create: createApiWithRetry((data) => api.post('/complaints', data)),\r\n  getMyComplaints: createApiWithRetry(() => api.get('/complaints/my-complaints')),\r\n  getComplaintsForMe: createApiWithRetry(() => api.get('/complaints/for-me')),\r\n  respond: createApiWithRetry((id, response) => api.put(`/complaints/${id}/respond`, { response })),\r\n  getAll: createApiWithRetry(() => api.get('/complaints')),\r\n};\r\n\r\n// ===== Connection / Health API =====\r\nexport const connectionAPI = {\r\n  health: () => api.get('/health'),\r\n  testAllEndpoints: async () => {\r\n    const results = {};\r\n    try {\r\n      results.health = await api.get('/health');\r\n      results.classes = await api.get('/users/classes').catch((e) => ({ error: e.message }));\r\n      results.courses = await api.get('/users/courses').catch((e) => ({ error: e.message }));\r\n      return results;\r\n    } catch (error) {\r\n      console.error('Comprehensive connection test failed:', error);\r\n      return { error: error.message };\r\n    }\r\n  },\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}